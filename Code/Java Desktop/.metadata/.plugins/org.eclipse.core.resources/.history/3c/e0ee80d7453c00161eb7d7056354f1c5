import java.io.*;
import java.net.*;
import java.util.*;

public class HomeConnect {
	static ArrayList<espDevice> deviceList = new ArrayList<espDevice>();
    public static void main(String[] args) throws IOException {
    	
    	BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
        if(args.length == 1){
        	espDevice dev = new espDevice(args[0], 2812);
        	dev.start();
        	if (dev.isValid()){
        		deviceList.add(dev);
        		System.out.println("device was valid");
        	} else {
        		dev.terminate();
        	}
        } else {
        	System.out.println("host address pls");
        	System.out.println("jk we're doing it live");
        	espDevice tempDev[] = new espDevice[255];
        	for (int i = 0; i < 255; i++){
        		tempDev[i] = new espDevice(("192.198.0."+i), 2812);
            	tempDev[i].start();
        	}
        	
        }
        
        System.out.println();
        System.out.print("> ");
        //main loop waiting for input
        String userInput;
        while ((userInput = stdIn.readLine()) != null) {
        	takeInput(userInput);
        	System.out.println();
        	System.out.print("> ");
        }

//        try (
//            Socket echoSocket = new Socket(hostName, portNumber);
//            DataOutputStream out = new DataOutputStream(echoSocket.getOutputStream());
//            DataInputStream in = new DataInputStream(echoSocket.getInputStream());
//            BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in))
//        ) {
//            System.out.println("Connected to TCP server");
//            System.out.println("Beginning handshake, sending a 17");
//            out.writeByte(17);
//            int shake = in.read();
//            System.out.println("Recieved back: " + shake);
//            if(shake == 12){
//                    System.out.println("Hand shake complete");
//            }
//            int len = in.read();
//
//
//            String userInput;
//            while ((userInput = stdIn.readLine()) != null) {
//                String userInSplit[] = userInput.split(" ");
//                byte bytesOut[] = new byte[userInSplit.length + 1];
//                bytesOut[0] = (byte)bytesOut.length;
//                System.out.println("Sending: " + bytesOut[0] + "(this is the length of the message)"); 
//                for(int i = 1; i < bytesOut.length; i++){
//                    try{
//                        if(Integer.parseInt(userInSplit[i-1]) > 127){
//                            bytesOut[i] = (byte)(Integer.parseInt(userInSplit[i-1]) & 0xFF);
//                        } else {
//                            bytesOut[i] = Byte.parseByte(userInSplit[i-1]);
//                        }
//                        System.out.println("Sending: " + bytesOut[i] + " | " + Integer.toBinaryString(bytesOut[i]));
//                    } catch (NumberFormatException e){
//                        handleStringCmd(userInput);
//                    }
//                    
//                } 
//                System.out.println();
//                
//                
//                if(in.available() > 0){
//                    int messageLength = in.read();
//                    byte[] message = new byte[messageLength];
//                    for(int i = 0; i < messageLength; i++){
//                        message[i] = (byte)in.read();
//                    }
//
//                    for(int i = 0; i < message.length; i++){
//                        System.out.println("The message contained" + message[i]);
//                    }
//
//                } else {
//                    System.out.println("input stream is empty");
//                }
//                
//            }
//
//        } catch (UnknownHostException e) {
//            System.err.println("Don't know about host " + hostName);
//            System.exit(1);
//        } catch (IOException e) {
//            System.err.println("Couldn't get I/O for the connection to " +
//                hostName);
//            System.exit(1);
//        } 
    }
    public static void handleStringCmd(String cmd){
        if (cmd.equals("exit")){
            System.out.println("exiting program");
            System.exit(0);
        } else if (cmd.equals("devices")){
        	for(int i = 0; i < deviceList.size(); i++){
        		System.out.println(deviceList.get(i).getHost());
        		
        		
        		//byte tempFuncs[] = deviceList.get(i).getFuncs().toArray();
        		System.out.println(deviceList.get(i).getFuncs());
        		System.out.println("Device function bytes are: ");
        		for(int j = 0; j < deviceList.get(i).getFuncs().size(); j++){
        			System.out.print(Integer.toBinaryString(deviceList.get(i).getFuncs().get(j)) + " ");
        		}
        		System.out.println();
        		byte tempID[] = deviceList.get(i).getDeviceID();
        		System.out.print("Device ID bytes are: ");
        		for(int j = 0; j < tempID.length; j++){
        			System.out.print(Integer.toBinaryString(tempID[j]) + " ");
        		}
        		
        	}
        }
    }
    
    public static void takeInput(String s){
    	try{
    		Integer.parseInt(s.split(" ")[0]);
    	} catch (NumberFormatException e){
    		handleStringCmd(s);
    	}
    }

    public static String[] convertFuncInt2String(int funcs[]){
        String funcsStr[] = new String[funcs.length];
        for (int i = 0; i < funcs.length; i++){
            if (funcs[i] == 1){
                funcsStr[i] = "LEDS";
            } else if (funcs[i] == 2){
                funcsStr[2] = "Environmental Sensing";
            }
        }
        return funcsStr;
    }
}