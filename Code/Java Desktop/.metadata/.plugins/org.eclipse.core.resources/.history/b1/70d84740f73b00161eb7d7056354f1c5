import java.io.*;
import java.net.*;

public class HomeConnect {
    public static void main(String[] args) throws IOException {
        
        if (args.length != 2) {
            System.err.println(
                "Usage: java EchoClient <host name> <port number>");
            System.exit(1);
        }

        String hostName = "192.168.0.";
        int portNumber = 2812;

        try (
            Socket echoSocket = new Socket(hostName, portNumber);
            DataOutputStream out = new DataOutputStream(echoSocket.getOutputStream());
            DataInputStream in = new DataInputStream(echoSocket.getInputStream());
            BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in))
        ) {
            System.out.println("Connected to TCP server");
            System.out.println("Beginning handshake, sending a 17");
            out.writeByte(17);
            int shake = in.read();
            System.out.println("Recieved back: " + shake);
            if(shake == 12){
                    System.out.println("Hand shake complete");
            }
            int len = in.read();
            for 

            String userInput;
            while ((userInput = stdIn.readLine()) != null) {
                String userInSplit[] = userInput.split(" ");
                byte bytesOut[] = new byte[userInSplit.length + 1];
                bytesOut[0] = (byte)bytesOut.length;
                System.out.println("Sending: " + bytesOut[0] + "(this is the length of the message)"); 
                for(int i = 1; i < bytesOut.length; i++){
                    try{
                        if(Integer.parseInt(userInSplit[i-1]) > 127){
                            bytesOut[i] = (byte)(Integer.parseInt(userInSplit[i-1]) & 0xFF);
                        } else {
                            bytesOut[i] = Byte.parseByte(userInSplit[i-1]);
                        }
                        System.out.println("Sending: " + bytesOut[i] + " | " + Integer.toBinaryString(bytesOut[i]));
                    } catch (NumberFormatException e){
                        handleStringCmd(userInput);
                    }
                    
                } 
                System.out.println();
                
                
                if(in.available() > 0){
                    int messageLength = in.read();
                    byte[] message = new byte[messageLength];
                    for(int i = 0; i < messageLength; i++){
                        message[i] = (byte)in.read();
                    }

                    for(int i = 0; i < message.length; i++){
                        System.out.println("The message contained" + message[i]);
                    }

                } else {
                    System.out.println("input stream is empty");
                }
                
            }

        } catch (UnknownHostException e) {
            System.err.println("Don't know about host " + hostName);
            System.exit(1);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for the connection to " +
                hostName);
            System.exit(1);
        } 
    }
    public static void handleStringCmd(String cmd){
        if (cmd.equals("exit")){
            System.out.println("exiting program");
            System.exit(0);
        }
    }

    public static String[] convertFuncInt2String(int funcs[]){
        String funcsStr[] = new String[funcs.length];
        for (int i = 0; i < funcs.length; i++){
            if (funcs[i] == 1){
                funcsStr[i] = "LEDS";
            } else if (funcs[i] == 2){
                funcsStr[2] = "Environmental Sensing"
            }
        }
        return funcsStr;
    }
    /*
    public static byte[] readMessage(){
        int messageLength = in.read();
        byte[] message = new byte[messageLength];
        for(int i = 0; i < messageLength; i++){
            message[i] = in.read();
        }
        return message;
    }

    public static void sendMessage(byte[] messageIn){
        messageLength = messageIn.length;
        byte[] message = new byte[messageLength + 1];
        message[0] = messageLength;
        for(int i = 0; i < messageLength; i++){
            message[i + 1] = messageIn[i];
        }
        out.write(message);
    }
    */
}